<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Books on Web Archive</title>
    <link>https://elastic-fermat-3dc26c.netlify.com/book/</link>
    <description>Recent content in Books on Web Archive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://elastic-fermat-3dc26c.netlify.com/book/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Laws</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/2018-09-13_laws/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/2018-09-13_laws/</guid>
      <description>Murphy&amp;rsquo;s Law Probably one of the most famous of all laws, mostly because it is not only applicable to Software Development.
If something can go wrong, it will.  First derivation: If it works, you probably didn&amp;rsquo;t write it. Second derivation: Cursing is the only language all programmers speak fluently. Conclusion: A computer will do what you write, not what you want.
Defensive programming, version control, doom scenario&amp;rsquo;s (for those damned zombie-server-attacks), TDD, MDD, etc.</description>
    </item>
    
    <item>
      <title>Coding the Matrix</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/coding-the-matrix/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/coding-the-matrix/</guid>
      <description>How to test the solutions
python3 submit.py python_lab.py Lab 1: Introduction to Python—sets, lists, dictionaries, and comprehensions Python provides some simple data structures for grouping together multiple values, and integrates them with the rest of the language. These data structures are called collections.
Sets A set is an unordered collection in which each value occurs at most once. You can use curly braces to give an expression whose value is a set.</description>
    </item>
    
    <item>
      <title>Applied Predictive Modelling</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/applied-predictive-modelling/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/applied-predictive-modelling/</guid>
      <description>Source cran
Chapter 1 Introduction Prediction Versus Interpretation, Key Ingredients of Predictive Models; Terminology; Example Data Sets and Typical Data Scenarios; Overview; Notation (15 pages, 3 figures)
Part I: General Strategies Chapter 2 A Short Tour of the Predictive Modeling Process Case Study: Predicting Fuel Economy; Themes; Summary (8 pages, 6 figures, R packages used)
Chapter 3 Data Pre-Processing Case Study: Cell Segmentation in High-Content Screening; Data Transformations for Individual Predictors; Data Transformations for Multiple Predictors; Dealing with Missing Values; Removing Variables; Adding Variables; Binning Variables; Computing; Exercises (32 pages, 11 figures, R packages used)</description>
    </item>
    
    <item>
      <title>Online Reads</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/online-reads/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/online-reads/</guid>
      <description> persönlicher Blog: harlecin.netlify.com Hackernews: news.ycombinator.com R-Bloggers: r-bloggers.com Data Machina: getrevue.co/profile/datamachina Reddit: reddit.com/r/MachineLearning  </description>
    </item>
    
    <item>
      <title>The Happiness Hypothesis</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/the-happiness-hypothesis/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/the-happiness-hypothesis/</guid>
      <description>The Divided Self Human thinking depends on metaphor. We understand new or complex things in relation to things we already know. For example, it&amp;rsquo;s hard to think about life in general, but once you apply the metaphor &amp;ldquo;life is a journey,&amp;rdquo; the metaphor guides you to some conclusions: You should learn the terrain, pick a direction, find some good traveling companions, and enjoy the trip, because there may be nothing at the end of the road.</description>
    </item>
    
    <item>
      <title>Jeff Bezos&#39; API Mandate</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/jeff-bezos-api-mandate/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/jeff-bezos-api-mandate/</guid>
      <description>The best article I&amp;rsquo;ve ever read about architecture and the management of IT.
UPDATE
This post was intended to be shared privately and was accidentally made public. Thanks to +Steve Yegge for allowing us to keep it out there. It&amp;rsquo;s the sort of writing people do when they think nobody is watching: honest, clear, and frank.
The world would be a better place if more people wrote this sort of internal memoranda, and even better if they were allowed to write it for the outside world.</description>
    </item>
    
    <item>
      <title>Conway&#39;s Law</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/conways-law/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/conways-law/</guid>
      <description>Many organizations have become adept at identifying what they need from software development projects, based on a keen understanding of their business goals. Even so, they’re often surprised to find out that the end results don’t achieve the transformative impact they were expecting. Their mistake? Overlooking the importance of Conway’s Law.
In 1967, Melvin Conway coined a phrase at the end of his publication ‘How do committees invent?’ that was subsequently made popular by Fred Brooks in his book The Mythical Man-Month, where he dubbed it &amp;lsquo;Conway’s Law&amp;rsquo;, which states:</description>
    </item>
    
  </channel>
</rss>