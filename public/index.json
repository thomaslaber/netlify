[
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/power-bi/",
	"title": "Power BI",
	"tags": ["visualization"],
	"description": "",
	"content": " Columns vs Measures Calculated columns (and tables) are:\n Evaluated for each row in your table, immediately after you hit \u0026lsquo;Enter\u0026rsquo; to complete the formula Saved back into the model so take up space  Calculated Measures are:\n Evaluated when you use it in a visual, when the visual is rendered Not saved anywhere (well, actually there\u0026rsquo;s a cache in the report layer but it\u0026rsquo;s not part of the file when you hit Save)  Generally, measures are more useful, but the trade-offs are the performance hit (report runtime vs. pre-processed), storage space, and the type of expressions you can use. For example calculated columns are often used when you want to filter on the result rather than just as a calculated result.\n"
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/sql-server/",
	"title": "SQL Server",
	"tags": ["visualization"],
	"description": "",
	"content": " Columns vs Measures Figure 3: Organization of teams driven by business capabilities\nFigure 3: Organization of teams driven by business capabilities\nAdd user to Managed Instance\ncreate user DataScienceCore from external provider "
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/microsoft-big-data-overview/",
	"title": "Microsoft Big Data Overview",
	"tags": ["devops"],
	"description": "",
	"content": " https://academy.microsoft.com/en-us/professional-program/tracks/big-data/\nBlock 1 – Data Fundamentals Learn data science basics. Explore topics like data queries, data analysis, data visualization and how statistics informs data science practices. Please choose from Course 2a or Course 2b to complete the unit.\n Course 1: Microsoft Professional Program: Introduction to Big Data Course 2a: Analyzing and Visualizing Data with Power BI Course 2b: Analyzing and Visualizing Data with Excel Course 3: Introduction to NoSQL Data Solutions Course 4: Querying Data with Transact-SQL  Unit 2 – Big Data Processing In this unit, you will learn how to use Azure services and open source technologies to implement batch processing and real-time processing of big data. Please choose a path focused on Azure or Hadoop in Azure HDInsight and take Course 6a and 7a or Course 6b and 7b to complete the unit.\n Course 5: Delivering a Data Warehouse in the Cloud Course 6a: Processing Big Data with Azure Data Lake Analytics Course 6b: Processing Big Data with Hadoop in Azure HDInsight\n Course 7a: Processing Real-Time Data Streams in Azure Course 7b: Implementing Real-Time Analytics with Hadoop in Azure HDInsight  Unit 3 – Big Data Analysis Solutions In this unit you will learn how to build workflow solutions that automate regular data processing and movement tasks, and apply predictive analytics to big data. Please continue with the programming language you selected in Unit 2. Select Course 9a, Course 9b, or Course 9c to complete the unit.\n Course 8: Orchestrating Big Data with Azure Data Factory Course 9a: Developing Big Data Solutions with Azure Machine Learning Course 9b: Analyzing Big Data with Microsoft R Course 9c: Implementing Predictive Analytics with Spark in Azure HDInsight  Unit 4 - Capstone Project In this final capstone project, you will apply everything you have learned to take on a big data processing challenge.\n Course 10: Microsoft Professional Capstone : Big Data  "
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/hugo_netlify/",
	"title": "Blogging with hugo netlify",
	"tags": ["webdevelopment"],
	"description": "Creating a personal blog with hugo netlify",
	"content": " Here is a great tutorial on how to host hugo on netlify\nCreate hugo site In order to create a new hugo site simply go:\nhugo new site [path] [flags] git Create a new repository on the command line Init the git repo and push it to the guthub repo:\necho \u0026#34;# website2\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git remote add origin https://github.com/thomaslaber/website2.git git push -u origin master # Push an existing repository from the command line # Alternatively you could link it to an already existing git repo: git remote add origin https://github.com/thomaslaber/website2.git git push -u origin master Theme as git submodule This is the theme I decided to go for Mainroad. Now you could add a theme of your choice git simply cloning it. However, it is more elegant to add it as a submodule.\n Submodules allow you to include or embed one or more repositories as a sub-folder inside another repository.\n git submodule add https://github.com/vimux/mainroad themes/mainroad git submodule init git submodule update # This means it can be updated by running: git submodule update --remote themes/mainroad hugo again Now we simply copy the config.toml in order to immediately have a running config for the theme.\ncp themes/mainroad/exampleSite/config.toml . We also could copy the examplesite folder from the theme folder in order to have some sample content to display. However, for now we refrain from doing that. We start the hugo server by:\nhugo server -D Add custom CSS We do not want to change anything in the theme folder as it will be updated and thus overwritten at some point of time. Therefore, we have to persist all our changes in the\nInside the config file we assign the path to an css file which can be found in static/css:\n[params] custom_css = [\u0026#34;css/tl.css\u0026#34;] You can reference as many stylesheets as you want. Their paths need to be relative to the static folder. Inside the header partial you can include every custom stylesheet from above beside the original one:\n{{ range .Site.Params.custom_css -}} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; {{- end }} Changing colors Unfortunately, the mainroad theme does not come with a built-in color-theme-support. Therefore, we have to replace color codes manually: I chose to go from \u0026block;\u0026block;\u0026block; #e64946 \u0026block;\u0026block;\u0026block; to \u0026block;\u0026block;\u0026block; #191970 \u0026block;\u0026block;\u0026block;. This can easily be done by runnnig a search and replace in the style.css after it was copied to the static/css folder.\n Remember: No changes in the theme folder!\n Adding Particles background In order to set a simple but important optical highlight, I decided to include the particle.js. This is done by adding the scripts in the static/js folder.\n\u0026lt;div id=\u0026#34;particles-js\u0026#34;\u0026gt;\t\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;{{ .Site.BaseURL }}js/particles.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  #particles-js { /* position: absolute; */ height: 100px; background-image: linear-gradient(to bottom right, black, navy,#aaa); } Main menu A big upset was the possibility to add new menu items: It only works\n\u0026lt;li class=\u0026#34;menu__item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;menu__link\u0026#34; href=\u0026#34;/categories/book/\u0026#34;\u0026gt;Books\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;menu__item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;menu__link\u0026#34; href=\u0026#34;/categories/project/\u0026#34;\u0026gt;Projects\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; Adding highlight.js config.toml\nhighlight = true highlightStyle = \u0026#34;monokai-sublime\u0026#34; highlightLanguages = [\u0026#34;r\u0026#34;, \u0026#34;sql\u0026#34;, \u0026#34;bash\u0026#34;, \u0026#34;css\u0026#34;] baseof.\n{{ if .Site.Params.highlight | default false }} \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ range .Site.Params.highlightLanguages }} \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/{{ . }}.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} \u0026lt;script\u0026gt;hljs.initHighlightingOnLoad();\u0026lt;/script\u0026gt; {{ end }} Adding a custom search function source add to config.toml\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Add the following to your config.toml configuration file:\nNote: Make shure to locate the required index.json file in the layouts folder. Once the file exists, hugo is going to dump the index to file.\nThe index.json file looks like:\n[{{ range $index, $page := .Site.Pages }} {{- if ne $page.Type \u0026#34;json\u0026#34; -}} {{- if and $index (gt $index 0) -}},{{- end }} { \u0026#34;uri\u0026#34;: \u0026#34;{{ $page.Permalink }}\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;{{ htmlEscape $page.Title}}\u0026#34;, \u0026#34;tags\u0026#34;: [{{ range $tindex, $tag := $page.Params.tags }}{{ if $tindex }}, {{ end }}\u0026#34;{{ $tag| htmlEscape }}\u0026#34;{{ end }}], \u0026#34;description\u0026#34;: \u0026#34;{{ htmlEscape .Description}}\u0026#34;, \u0026#34;content\u0026#34;: {{$page.Plain | jsonify}} } {{- end -}} {{- end -}}] Once this is done, hugo generates a lunrjs index.json at the root of your public folder. If you encounter some problems run: hugo \u0026ndash;verbose and check messages and warnings. Web site configuration:\n../layouts/partials/header.html\nTypically, that’s where the css files are:\n\u0026lt;head\u0026gt; ... {{ if not .Site.Params.disableSearch }} \u0026lt;link href=\u0026#34;{{ .Site.BaseURL }}css/auto-complete.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; {{ end }} ... \u0026lt;/head\u0026gt; ../layouts/partials/scripts.html\nPlease note: as lunr.js is based on jquery, make sure jquery.js gets loaded 1st.\n\u0026lt;body\u0026gt; ... \u0026lt;!-- custom search --\u0026gt; {{ if not .Site.Params.disableSearch }} \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ .Site.BaseURL }}js/lunr.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ .Site.BaseURL }}js/auto-complete.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var baseurl = \u0026#34;{{ .Site.BaseURL }}\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ .Site.BaseURL }}js/search.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} ... \u0026lt;/body\u0026gt; and finally, add a search entry box somewhere in your webpage layout:\n{{ if not .Site.Params.disableSearch }} \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt; \u0026lt;a\u0026gt; \u0026lt;i class=\u0026#34;fa fa-search\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;div class=\u0026#34;searchbox pull-right\u0026#34;\u0026gt; \u0026lt;input data-search-input id=\u0026#34;search-by\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} delete \u0026ldquo;Â\u0026rdquo; in \u0026ldquo;Â»\u0026rdquo; in search.js at line 80\n"
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/most-useful-git-commands/",
	"title": "Most useful git commands",
	"tags": ["devops"],
	"description": "",
	"content": " Setup Set your details\ngit config --global user.name \u0026#34;John Doe\u0026#34; git config --global user.email \u0026#34;john@example.com\u0026#34; Use \u0026ndash;global to set the configuration for all projects. If git config is used without \u0026ndash;global and run inside a project directory, the settings are set for the specific project. Make git ignore file modes\ncd project/ git config core.filemode false\nThis option is useful if the file permissions are not important to us, for example when we are on Windows. See your settings\ngit config \u0026ndash;list\n##Starting a repo\nInitialize a git repository for existing code\ncd existing-project/ git init\nClone a remote repository\ngit clone https://github.com/user/repository.git\nThis creates a new directory with the name of the repository. Clone a remote repository in the current directory\ngit clone https://github.com/user/repository.git .\nGet help for a specific git command\ngit help clone\n##Branching\nUpdate and merge your current branch with a remote\ncd repository/ git pull origin master\nWhere origin is the remote repository, and master the remote branch. If you don\u0026rsquo;t want to merge your changes, use git fetch View remote urls\ngit remote -v\nChange origin url\ngit remote set-url origin http//github.com/repo.git\nAdd remote\ngit remote add remote-name https://github.com/user/repo.git\nSee non-staged (non-added) changes to existing files\ngit diff\nNote that this does not track new files. See staged, non-commited changes\ngit diff \u0026ndash;cached\nSee differences between local changes and master\ngit diff origin/master\nNote that origin/master is one local branch, a shorthand for refs/remotes/origin/master, which is the full name of the remote-tracking branch. See differences between two commits\ngit diff COMMIT1_ID COMMIT2_ID\nSee the files that changed between two commits\ngit diff \u0026ndash;name-only COMMIT1_ID COMMIT2_ID\nSee the files changed in a specific commit\ngit diff-tree \u0026ndash;no-commit-id \u0026ndash;name-only -r COMMIT_ID\nor\ngit show \u0026ndash;pretty=\u0026ldquo;format:\u0026rdquo; \u0026ndash;name-only COMMIT_ID\nSource: http://stackoverflow.com/a/424142/1391963 See diff before push\ngit diff \u0026ndash;cached origin/master\nSee diff with only the changed lines (no context)\ngit diff \u0026ndash;unified=0\nSee details (log message, text diff) of a commit\ngit show COMMIT_ID\nCount the number of commits\ngit rev-list HEAD \u0026ndash;count\ngit rev-list COMMIT_ID \u0026ndash;count\nCheck the status of the working tree (current branch, changed files\u0026hellip;)\ngit status\nMake some changes, commit them\ngit add changed_file.txt git add folder-with-changed-files/ git commit -m \u0026ldquo;Commiting changes\u0026rdquo;\nRename/move and remove files\ngit rm removeme.txt tmp/crap.txt git mv file_oldname.txt file_newname.txt git commit -m \u0026ldquo;deleting 2 files, renaming 1\u0026rdquo;\nChange message of last commit\ngit commit \u0026ndash;amend -m \u0026ldquo;New commit message\u0026rdquo;\nPush local commits to remote branch\ngit push origin master\nPush commits to all remotes, in a single command\nGit does not do that, but see https://stackoverflow.com/a/18674313/1391963 See recent commit history\ngit log\nSee commit history for the last two commits\ngit log -2\nSee commit history for the last two commits, with diff\ngit log -p -2\nSee commit history printed in single lines\ngit log \u0026ndash;pretty=oneline\nRevert one commit, push it\ngit revert dd61ab21 git push origin master\nRevert to the moment before one commit\nreset the index to the desired tree git reset 56e05fced\nmove the branch pointer back to the previous HEAD git reset \u0026ndash;soft HEAD@{1}\ngit commit -m \u0026ldquo;Revert to 56e05fced\u0026rdquo;\nUpdate working copy to reflect the new commit git reset \u0026ndash;hard\nSource: http://stackoverflow.com/q/1895059/1391963 Undo last commit, preserving local changes\ngit reset \u0026ndash;soft HEAD~1\nUndo last commit, without preserving local changes\ngit reset \u0026ndash;hard HEAD~1\nUndo last commit, preserving local changes in index\ngit reset \u0026ndash;mixed HEAD~1\nOr git reset HEAD~1 See also http://stackoverflow.com/q/927358/1391963 Undo non-pushed commits\ngit reset origin/master\nReset to remote state\ngit fetch origin git reset \u0026ndash;hard origin/master\nSee local branches\ngit branch\nSee all branches\ngit branch -a\nMake some changes, create a patch\ngit diff \u0026gt; patch-issue-1.patch\nAdd a file and create a patch\ngit add newfile git diff \u0026ndash;staged \u0026gt; patch-issue-2.patch\nAdd a file, make some changes, and create a patch\ngit add newfile git diff HEAD \u0026gt; patch-issue-2.patch\nMake a patch for a commit\ngit format-patch COMMIT_ID\nMake patches for the last two commits\ngit format-patch HEAD~2\nMake patches for all non-pushed commits\ngit format-patch origin/master\nCreate patches that contain binary content\ngit format-patch \u0026ndash;binary \u0026ndash;full-index origin/master\nApply a patch\ngit apply -v patch-name.patch\nApply a patch created using format-patch\ngit am patch1.patch\nBreak up multiple changes into separate commits (or commit only part of a changed file)\ngit add \u0026ndash;patch file.txt (press \u0026lsquo;y\u0026rsquo; for the chunks to add) git commit -m \u0026lsquo;first part of the file\u0026rsquo; (repeat if desired)\nSources: https://stackoverflow.com/q/4948494/1391963, https://stackoverflow.com/q/1085162/1391963 Create a tag\ngit tag 7.x-1.3\nPush a tag\ngit push origin 7.x-1.3\nCreate a branch\ngit checkout master git branch new-branch-name\nHere master is the starting point for the new branch. Note that with these 2 commands we don\u0026rsquo;t move to the new branch, as we are still in master and we would need to run git checkout new-branch-name. The same can be achieved using one single command: git checkout -b new-branch-name Create a branch from a previous commit\ngit branch branchname sha1-of-commit\nor using a symbolic reference (e.g. last commit):\ngit branch branchname HEAD~1\nYou can also use\ngit checkout -b branchname sha1-of-commit\nSource: http://stackoverflow.com/a/2816728/1391963 Checkout a branch\ngit checkout new-branch-name\nSee commit history for just the current branch\ngit cherry -v master\n(master is the branch you want to compare) Merge branch commits\ngit checkout master git merge branch-name\nHere we are merging all commits of branch-name to master. Merge a branch without committing\ngit merge branch-name \u0026ndash;no-commit \u0026ndash;no-ff\nSee differences between the current state and a branch\ngit diff branch-name\nSee differences in a file, between the current state and a branch\ngit diff branch-name path/to/file\nDelete a branch\ngit branch -d new-branch-name\nPush the new branch\ngit push origin new-branch-name\nGet all branches\ngit fetch origin\nGet the git root directory\ngit rev-parse \u0026ndash;show-toplevel\nSource: http://stackoverflow.com/q/957928/1391963 Remove from repository all locally deleted files\ngit rm $(git ls-files \u0026ndash;deleted)\nSource: http://stackoverflow.com/a/5147119/1391963 Delete all untracked files\ngit clean -f\nIncluding directories:\ngit clean -f -d\nPreventing sudden cardiac arrest:\ngit clean -n -f -d\nSource: http://stackoverflow.com/q/61212/1391963 Delete all files from a git repository that have already been deleted from disk:\ngit ls-files \u0026ndash;deleted -z | xargs -0 git rm\nSource (and alternatives): https://stackoverflow.com/a/5147119/1391963 Show total file size difference between two commits\nShort answer: Git does not do that. Long answer: See http://stackoverflow.com/a/10847242/1391963 Unstage (undo add) files:\ngit reset HEAD file.txt\nSee closest tag\ngit describe \u0026ndash;tags git rev-list --tags --max-count=1\nSource: http://stackoverflow.com/q/1404796/1391963. See also git-describe. Debug SSH connection issues\nGIT_SSH_COMMAND=\u0026ldquo;ssh -vvv\u0026rdquo; git clone \nHave git pull running every X seconds, with GNU Screen\nUse Ctrl+a Ctrl+d to detach the screen. See previous git commands executed\nhistory | grep git\nor\ngrep \u0026lsquo;^git\u0026rsquo; /root/.bash_history\nSee recently used branches (i.e. branches ordered by most recent commit)\ngit for-each-ref \u0026ndash;sort=-committerdate refs/heads/ | head\nSource: http://stackoverflow.com/q/5188320/1391963 Tar project files, excluding .git directory\ncd .. tar cJf project.tar.xz project/ \u0026ndash;exclude-vcs\nTar all locally modified files\ngit diff \u0026ndash;name-only | xargs tar -cf project.tar -T -\nLook for conflicts in your current files\ngrep -H -r \u0026ldquo;\u0026lt;\u0026lt;\u0026lt;\u0026rdquo; * grep -H -r \u0026ldquo;\u0026gt;\u0026gt;\u0026gt;\u0026rdquo; * grep -H -r \u0026lsquo;^=======$\u0026rsquo; *\nThere\u0026rsquo;s also git-grep. Apply a patch not using git:\npatch -p1 \u0026lt; file.patch\n"
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/scrum-psm-i/",
	"title": "SCRUM PSM I",
	"tags": ["devops"],
	"description": "",
	"content": " The complete guido can be downloaded here: scrumguides.org\n1. What is Scrum? Scrum is a framework for developing and sustaining complex products. A framework in which complex adaptive problems can be addressed. It is lightweight, simple to understand and yet difficult to master. To simplify, Scrum is not a process or a technique - it is a framework within which you can use different processes and techniques. It has roles, events, artefacts and rules that bind them together. Each component has a specific purpose. Scrum takes an iterative and incremental approach - optimizing predictability and control risk.\nScrum has its foundation based on the Empirical Process Theory - where knowledge comes from experience and decisions are made based on what is known. There are three pillars that uphold every implementation of empirical process control. - Transparency - Inspection - Adaptation  1.1. Scrum Values The five core values that are reflective in the work of a Scrum Team.\n People personally commit to achieving the goal of the Scrum team. Scrum member have the Courage to do the right thing. Everyone\u0026rsquo;s focus is on the sprint and Scrum team goals. Everyone agrees to be Open about all the work and challenges. Scrum team members Respect each other of being capable and independent.  2. Scrum Team A self-organised and cross functional team - designed to optimize flexibility, creativity and productivity.\n Role Description Rules   Product Owner   Maximize the value of product and work of the Development Team. Sole person responsible for managing the product Backlog.     Product Owner is one person, not a committee. Only the Product Owner can make changes to product Backlog item\u0026rsquo;s priority. Only the Product Owner can cancel a sprint under the influence of stakeholders, Scrum Master and the Development Team.     Scrum Master   Responsible for making sure everyone understands Scrum and adheres. Facilitate Scrum events. Coach the team. Remove impediments. Help the organisation to adopt Scrum.     Scrum Master ensures that only helpful interactions are taking place with the Development Team and anyone outside. Scrum Master is a Servant-Leader.  \n  Development Team   Self-organised and accountable. No one tells the Development Team how to turn the Backlog item into increments of realisable product. Cross-functional team with all skills to create a Product Increment.     Development Team should not act on anyone else\u0026rsquo;s request. Team size should be between 3 and 9. Everyone\u0026rsquo;s title is Developer and there should not be any sub-teams. No one can instruct the Development Team to work on different set of requirements. The number of items from the Backlog for the sprint is solely up to the Development Team.    \n3. Scrum Events All events in Scrum are time boxed. Sprint duration cannot change once it's started. However, it can be cancelled before the time box is over. Only a Product Owner can cancel a Sprint if the organisation changes direction or the market or the technology conditions change. Events enable transparency and create an opportunity to inspect and adapt.  The Sprint is the heart of Scrum, a time box of one month or less during which a DONE, usable, and potential releasable product increment is created.\n Events Time\u0026nbsp;Box* Agenda Required   Sprint Planning 08 Hours  What items can be done? How will the work get done?  The Scrum   Daily Stand-ups 15\u0026nbsp;Minutes  What I did yesterday What will I do today Any Impediments  The Development team   Sprint Review 04 Hours  Product Owner starts with what items are done from the Backlog. Development team talks about what went well, what problem it ran into, how the problems were solved. Development team demonstrates the work it has DONE. Product Owner projects the likely completion dates. Collaborate on what to do next.  The Scrum Team and the Stakeholders   Sprint Retrospective 03 Hours  How did the last Sprint go with respect to - people, relationships, process and tools. Major items that went well and potential improvements. Plan to implement improvements in the next sprint.  The Scrum Team  \n*Time box mentioned above is for one month sprint. For short sprint, it\u0026rsquo;s usually shorter. Scrum activities - Backlog refining or grooming.\nThis is an on-going activity and should not take more than 10 % of the Development Team\u0026rsquo;s time where product Backlogs are groomed or refined. The Product Owner is responsible for prioritizing the product Backlog items and the Development Team is responsible for estimating them.\n4. Scrum Artefacts Scrum's artefacts reflect the three pillars of the Empirical Theory Process in the work or value to increase transparency and opportunities for inspection and an enhanced scope for adaptation.   Artefact Description Owner   Product Backlog  Product Backlog is an ordered list of everything that's needed to complete a product. It is the single source of a living list of requirement. Product Owner is responsible to maintain and prioritize the Backlog items. Product Backlog is dynamic and never complete. Sprint can start as soon as there are enough items in the Backlog. There is always only one product Backlog.  Product Owner   Sprint Backlog  Product Backlog is an ordered list of everything that's needed to complete a product. It is the single source of a living list of requirement. Product Owner is responsible to maintain and prioritize the Backlog items. Product Backlog is dynamic and never complete. Sprint can start as soon as there are enough items in the Backlog. There is always only one product Backlog.  Development\u0026nbsp;Team   Increment   An Increment is a sum of all completed product Backlog items and the items of the increments of all previous sprints.  e.g.\nIncrement 1 = Sprint 1 Increment 2 = Sprint 1 + Sprint 2\nIncrement 3 = Sprint 1 + Sprint 2 + Sprint 3.   Development Team   Monitoring progress towards a Goal (delivering the product)  The total work remaining to reach the goal can be summed. The product Owner compares the amount of work remaining against the previous sprint reviews to assess the progress.  Most commonly used techniques are burn-down and burn-up charts.   Product Owner   Monitoring Sprint Progress  The sum of remaining work to deliver an increment which is reviewed at the daily scrum. The sprint progress information can be represented by a burn-down chart.  Development Team   5. Progress Tracking Tools Burn-down charts: Burn-down chart shows the progress the Development Team is making and is a powerful tool for visualising progress and work remaining. Burn-down charts may be used for financial tracking, resource tracking etc. In respect to a sprint, a burn-down chart is represented as -\n vertical Axis - remaining work (total estimated hours) for the sprint or product Backlog horizontal Axis - time, in days or sprints  A burn-down chart enables everyone to view the status of a sprint at any time.\n6. Estimation Techniques There are number of estimation techniques used in Agile. Most widely used in planning is the poker technique to estimate items. Participants use cards to estimate an item. This exercise is repeated in iterations until everyone\u0026rsquo;s estimates are unanimous. Units used are hours, days or story points. Other techniques in practice are:\n The Bucket System Big/Uncertain/Small Dot voting T-shirt sizes Affinity mapping and more  7. Definitions  Done  A product Backlog item or an increment that is releasable is called DONE. Everyone in the Scrum team should have common understanding of DONE.\nDONE should include all the development practices before the item is released into production.  Velocity Average of items done per Sprint to deliver a product. e.g. It took 5 sprints to deliver a product. Sprint1 - 10 Units\nSprint2 - 12 Units\nSprint3 - 9 Units\nSprint4 - 11 Units\nSprint5 - 13 Units\nVelocity of the team in this example is 11 ((10 + 12 + 9 + 11 + 13)/5) units per Sprint.  Time box Fixed time-period, it is an agreed previous agreed duration which the team has been consistently delivering a task or completing a goal. Sprint Goal Description of what the Development Team agrees to achieve in a sprint.  8. Reference: https://www.scrum.org/resources/scrum-guide\nWhat I also found quite interesting are the number of people that took the certifications: https://www.scrum.org/professional-scrum-certifications/count\n"
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": " Hugo is a static site engine written in Go.\nIt makes use of a variety of open source projects including:\n Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.\nSetup Some fun facts about Hugo:\n Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions? Feel free to open an issue on GitHub or ask me on Twitter.\nThanks for reading!\n"
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/tags/devops/",
	"title": "Devops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/categories/post/",
	"title": "Post",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/post/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/categories/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/project/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/tags/visualization/",
	"title": "Visualization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/",
	"title": "Web Archive",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://elastic-fermat-3dc26c.netlify.com/tags/webdevelopment/",
	"title": "Webdevelopment",
	"tags": [],
	"description": "",
	"content": ""
}]