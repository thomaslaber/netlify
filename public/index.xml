<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Archive</title>
    <link>https://elastic-fermat-3dc26c.netlify.com/</link>
    <description>Recent content on Web Archive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://elastic-fermat-3dc26c.netlify.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Power BI</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/power-bi/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/power-bi/</guid>
      <description>Columns vs Measures Calculated columns (and tables) are:
 Evaluated for each row in your table, immediately after you hit &amp;lsquo;Enter&amp;rsquo; to complete the formula Saved back into the model so take up space  Calculated Measures are:
 Evaluated when you use it in a visual, when the visual is rendered Not saved anywhere (well, actually there&amp;rsquo;s a cache in the report layer but it&amp;rsquo;s not part of the file when you hit Save)  Generally, measures are more useful, but the trade-offs are the performance hit (report runtime vs.</description>
    </item>
    
    <item>
      <title>SQL Server</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/sql-server/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/sql-server/</guid>
      <description>Actual Execution Plan Figure 3: Organization of teams driven by business capabilities
Figure 3: Organization of teams driven by business capabilities
Add user to Managed Instance create user DataScienceCore from external provider There are two types of Indexes in SQL Server:
 Clustered Index Non-Clustered Index  Clustered Index A clustered index defines the order in which data is physically stored in a table. Table data can be sorted in only way, therefore, there can be only one clustered index per table.</description>
    </item>
    
    <item>
      <title>Microsoft Big Data Overview</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/microsoft-big-data-overview/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/microsoft-big-data-overview/</guid>
      <description>https://academy.microsoft.com/en-us/professional-program/tracks/big-data/
Block 1 – Data Fundamentals Learn data science basics. Explore topics like data queries, data analysis, data visualization and how statistics informs data science practices. Please choose from Course 2a or Course 2b to complete the unit.
 Course 1: Microsoft Professional Program: Introduction to Big Data Course 2a: Analyzing and Visualizing Data with Power BI Course 2b: Analyzing and Visualizing Data with Excel Course 3: Introduction to NoSQL Data Solutions Course 4: Querying Data with Transact-SQL  Unit 2 – Big Data Processing In this unit, you will learn how to use Azure services and open source technologies to implement batch processing and real-time processing of big data.</description>
    </item>
    
    <item>
      <title>Docker Basics</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/docker-basics/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/docker-basics/</guid>
      <description>Docker is a tool which helps developers build and ship high quality applications, faster, anywhere. Source
Why Docker With Docker, developers can build any app in any language using any toolchain. Dockerized apps are completely portable and can run anywhere.
Developers can get going by just spinning any container out of list on Docker Hub. Docker manages and tracks changes and dependencies, making it easier for sysadmins to understand how the apps that developers build work.</description>
    </item>
    
    <item>
      <title>Airbnb Knowledge Repo</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/airbnb-knowledge-repo/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/airbnb-knowledge-repo/</guid>
      <description>The Knowledge Repo project is focused on facilitating the sharing of knowledge between data scientists and other technical roles using data formats and tools that make sense in these professions. It provides various data stores (and utilities to manage them) for &amp;ldquo;knowledge posts&amp;rdquo;, with a particular focus on notebooks (R Markdown and Jupyter / IPython Notebook) to better promote reproducible research.
 Source https://github.com/airbnb/knowledge-repo Tutorial: https://github.com/airbnb/knowledge-repo/issues/401  Activation  Docker-compose-relevante Dateien in einen entsprechend autorisierten Zielfolder kopieren, in dem docker-compose-Befehle (vor allem “build“/“up“/“down“) auszuführen sind.</description>
    </item>
    
    <item>
      <title>Blogging with hugo netlify</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/hugo_netlify/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/hugo_netlify/</guid>
      <description>Here is a great tutorial on how to host hugo on netlify
Creating the hugo site In order to create a new hugo site simply go:
hugo new site [path] [flags] Create a new repository via git Init the git repo and push it to the guthub repo:
echo &amp;#34;# website2&amp;#34; &amp;gt;&amp;gt; README.md git init git add README.md git commit -m &amp;#34;first commit&amp;#34; git remote add origin https://github.com/thomaslaber/website2.git git push -u origin master # Push an existing repository from the command line # Alternatively you could link it to an already existing git repo: git remote add origin https://github.</description>
    </item>
    
    <item>
      <title>Coding the Matrix</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/coding-the-matrix/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/coding-the-matrix/</guid>
      <description>How to test the solutions
python3 submit.py python_lab.py Lab 1: Introduction to Python—sets, lists, dictionaries, and comprehensions Python provides some simple data structures for grouping together multiple values, and integrates them with the rest of the language. These data structures are called collections.
Sets A set is an unordered collection in which each value occurs at most once. You can use curly braces to give an expression whose value is a set.</description>
    </item>
    
    <item>
      <title>How to install Fultz&#39; grpc package</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/grpc-package/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/grpc-package/</guid>
      <description>Instructions Link to instructions
git clone https://github.com/grpc/grpc.git grpc.git cd grpc.git/ # git checkout tags/release-0_11_1 # does not exist Now we have to initialize the submodules and this is where it becomes tricky:
git submodule update --init cd third_party/protobuf/ ./autogen.sh  Google changed some of its internal structures and now gmock is part of google test. Anyways, the URL in the autpgen.sh is not working anymore. There we need to manually extract gmock into protobuf:</description>
    </item>
    
    <item>
      <title>Most useful git commands</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/most-useful-git-commands/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/most-useful-git-commands/</guid>
      <description>Setup Set your details
git config --global user.name &amp;#34;John Doe&amp;#34; git config --global user.email &amp;#34;john@example.com&amp;#34; Use --global to set the configuration for all projects. If git config is used without --global and run inside a project directory, the settings are set for the specific project.
Make git ignore file modes
cd project/ git config core.filemode false This option is useful if the file permissions are not important to us, for example when we are on Windows.</description>
    </item>
    
    <item>
      <title>Scrum PSM I</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/scrum-psm-i/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/scrum-psm-i/</guid>
      <description>After getting scrum.org the PSM I I wanted to capture the relevant content.
The complete guido can be downloaded here: scrumguides.org
1. What is Scrum? Scrum is a framework for developing and sustaining complex products. A framework in which complex adaptive problems can be addressed. It is lightweight, simple to understand and yet difficult to master. To simplify, Scrum is not a process or a technique - it is a framework within which you can use different processes and techniques.</description>
    </item>
    
    <item>
      <title>Linear Regression</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/machine-learning/2018-01_linear_regression/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/machine-learning/2018-01_linear_regression/</guid>
      <description>Source https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/
It is used to estimate real values (cost of houses, number of calls, total sales etc.) based on continuous variable(s). Here, we establish relationship between independent and dependent variables by fitting a best line. This best fit line is known as regression line and represented by a linear equation
$$Y= a *X + b$$
The best way to understand linear regression is to relive this experience of childhood.</description>
    </item>
    
    <item>
      <title>Logistic Regression</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/machine-learning/2018-02_logistic_regression/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/machine-learning/2018-02_logistic_regression/</guid>
      <description>Don’t get confused by its name! It is a classification not a regression algorithm. It is used to estimate discrete values (binary values like 0/1, yes/no, true/false ) based on given set of independent variable(s). In simple words, it predicts the probability of occurrence of an event by fitting data to a logit function. Hence, it is also known as logit regression. Since, it predicts the probability, its output values lies between 0 and 1 (as expected).</description>
    </item>
    
    <item>
      <title>Machine Learning Overview</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/machine-learning/2018-01_machine_learning/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/machine-learning/2018-01_machine_learning/</guid>
      <description>Broadly, there are three types of Machine Learning Algorithms..
1. Supervised Learning How it works: This algorithm consist of a target or outcome variable (or dependent variable) which is to be predicted from a given set of predictors (independent variables). Using these set of variables, we generate a function that map inputs to desired outputs. The training process continues until the model achieves a desired level of accuracy on the training data.</description>
    </item>
    
    <item>
      <title>Applied Predictive Modelling</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/applied-predictive-modelling/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/applied-predictive-modelling/</guid>
      <description>Source
Chapter 1 Introduction Prediction Versus Interpretation, Key Ingredients of Predictive Models; Terminology; Example Data Sets and Typical Data Scenarios; Overview; Notation (15 pages, 3 figures)
Part I: General Strategies Chapter 2 A Short Tour of the Predictive Modeling Process Case Study: Predicting Fuel Economy; Themes; Summary (8 pages, 6 figures, R packages used)
Chapter 3 Data Pre-Processing Case Study: Cell Segmentation in High-Content Screening; Data Transformations for Individual Predictors; Data Transformations for Multiple Predictors; Dealing with Missing Values; Removing Variables; Adding Variables; Binning Variables; Computing; Exercises (32 pages, 11 figures, R packages used)</description>
    </item>
    
    <item>
      <title>Online Reads</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/online-reads/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/online-reads/</guid>
      <description> persönlicher Blog: harlecin.netlify.com Hackernews: news.ycombinator.com R-Bloggers: r-bloggers.com Data Machina: getrevue.co/profile/datamachina Reddit: reddit.com/r/MachineLearning  </description>
    </item>
    
    <item>
      <title>The Happiness Hypothesis</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/the-happiness-hypothesis/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/the-happiness-hypothesis/</guid>
      <description>The Divided Self Human thinking depends on metaphor. We understand new or complex things in relation to things we already know. For example, it&amp;rsquo;s hard to think about life in general, but once you apply the metaphor &amp;ldquo;life is a journey,&amp;rdquo; the metaphor guides you to some conclusions: You should learn the terrain, pick a direction, find some good traveling companions, and enjoy the trip, because there may be nothing at the end of the road.</description>
    </item>
    
    <item>
      <title>Jeff Bezos&#39; API Mandate</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/jeff-bezos-api-mandate/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/jeff-bezos-api-mandate/</guid>
      <description>The best article I&amp;rsquo;ve ever read about architecture and the management of IT.
UPDATE
This post was intended to be shared privately and was accidentally made public. Thanks to +Steve Yegge for allowing us to keep it out there. It&amp;rsquo;s the sort of writing people do when they think nobody is watching: honest, clear, and frank.
The world would be a better place if more people wrote this sort of internal memoranda, and even better if they were allowed to write it for the outside world.</description>
    </item>
    
    <item>
      <title>Conway&#39;s Law</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/book/conways-law/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/book/conways-law/</guid>
      <description>Many organizations have become adept at identifying what they need from software development projects, based on a keen understanding of their business goals. Even so, they’re often surprised to find out that the end results don’t achieve the transformative impact they were expecting. Their mistake? Overlooking the importance of Conway’s Law.
In 1967, Melvin Conway coined a phrase at the end of his publication ‘How do committees invent?’ that was subsequently made popular by Fred Brooks in his book The Mythical Man-Month, where he dubbed it &amp;lsquo;Conway’s Law&amp;rsquo;, which states:</description>
    </item>
    
    <item>
      <title>Web Development @webdevelopers.at</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/webdevelopers/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/webdevelopers/</guid>
      <description>Testing</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://elastic-fermat-3dc26c.netlify.com/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://elastic-fermat-3dc26c.netlify.com/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.
Setup Some fun facts about Hugo:
 Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions?</description>
    </item>
    
  </channel>
</rss>